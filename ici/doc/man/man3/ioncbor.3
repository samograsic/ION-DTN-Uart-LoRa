.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "pod3::ioncbor 3"
.TH pod3::ioncbor 3 "2022-10-13" "perl v5.34.0" "ICI library functions"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cbor \- ION library for encoding and decoding CBOR data representations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #include "cbor.h"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1ION\s0's \*(L"cbor\*(R" library implements a subset of the Concise Binary Object
Representation (\s-1CBOR\s0) standard, \s-1RFC 7049\s0; only those data types used in
\&\s-1ION\s0 code are implemented.  Unlike other \s-1CBOR\s0 implementations, \s-1ION CBOR\s0
is specifically intended for compatibility with zero-copy objects, i.e.,
the data being decoded need not all be in a memory buffer.
.PP
For all functions, \fI*cursor\fR is a pointer to the location in the \s-1CBOR\s0
coding buffer at which bytes are to be encoded or decoded.  This pointer
is automatically advanced as the encoding or decoding operation is
performed.
.PP
Most of the \s-1ION CBOR\s0 decoding functions entail the decoding of unsigned
integers.  The invoking code may require that an integer representation
have a specific size by indicating the integer size \*(L"class\*(R" that is
required.  Class \-1 indicates that an integer of any size is acceptable;
the other classes (0, 1, 2, 4, 8) indicate the number of bytes of integer
data that \s-1MUST\s0 follow the integers initial byte.
.IP "int cbor_encode_integer(uvast value, unsigned char **cursor)" 4
.IX Item "int cbor_encode_integer(uvast value, unsigned char **cursor)"
Represent this value in an integer of the smallest possible integer class.
Cursor is automatically advanced.  Returns number of bytes written.
.IP "int cbor_encode_fixed_int(uvast value, int class, unsigned char **cursor)" 4
.IX Item "int cbor_encode_fixed_int(uvast value, int class, unsigned char **cursor)"
Represent this value in an integer of the indicated class.  Cursor is
automatically advanced.  Returns number of bytes written, 0 on encoding error.
.IP "int cbor_encode_byte_string(unsigned char *value, uvast size, unsigned char **cursor)" 4
.IX Item "int cbor_encode_byte_string(unsigned char *value, uvast size, unsigned char **cursor)"
\&\fIsize\fR is the number of bytes to write.  If value is \s-1NULL,\s0 only the size of
the byte string is written; otherwise the byte string itself is written as
well.  Cursor is advanced by the number of bytes written in either case.
Returns number of bytes written.
.IP "int cbor_encode_text_string(char *value, uvast size, unsigned char **cursor)" 4
.IX Item "int cbor_encode_text_string(char *value, uvast size, unsigned char **cursor)"
\&\fIsize\fR is the number of bytes to write.  If value is \s-1NULL,\s0 only the size of
the text string is written; otherwise the text string itself is written
as well.  Cursor is advanced by the number of bytes written in either case.
Returns number of bytes written.
.IP "int cbor_encode_array_open(uvast size, unsigned char **cursor)" 4
.IX Item "int cbor_encode_array_open(uvast size, unsigned char **cursor)"
If \fIsize\fR is ((uvast) \-1), the array is of indefinite size; otherwise \fIsize\fR
indicates the number of items in the array.  Cursor is automatically advanced.
Returns number of bytes written.
.IP "int cbor_encode_break(unsigned char **cursor)" 4
.IX Item "int cbor_encode_break(unsigned char **cursor)"
Break code is written at the indicated location.  Cursor is automatically
advanced.  Returns number of bytes written (always 1).
.IP "int cbor_decode_initial_byte(unsigned char **cursor, unsigned int *bytesBuffered, int *majorType, int *additionalInfo)" 4
.IX Item "int cbor_decode_initial_byte(unsigned char **cursor, unsigned int *bytesBuffered, int *majorType, int *additionalInfo)"
This function just extracts major type and additional info from the byte
identified by \fIcursor\fR.  Cursor is automatically advanced.  Returns number of
bytes decoded (always 1) or 0 on decoding error (e.g., no byte to decode).
.IP "int cbor_decode_integer(	uvast *value, int class, unsigned char **cursor, unsigned int *bytesBuffered)" 4
.IX Item "int cbor_decode_integer( uvast *value, int class, unsigned char **cursor, unsigned int *bytesBuffered)"
If \fIclass\fR is CborAny, any class of data item is accepted; otherwise only an
integer data item of the indicated class is accepted.  Cursor is automatically
advanced.  Returns number of bytes read, 0 on decoding error (e.g., integer
is of the wrong class).
.IP "int cbor_decode_byte_string(unsigned char *value, uvast *size, unsigned char **cursor, unsigned int *bytesBuffered)" 4
.IX Item "int cbor_decode_byte_string(unsigned char *value, uvast *size, unsigned char **cursor, unsigned int *bytesBuffered)"
Initial value of \fIsize\fR is the maximum allowable size of the decoded byte
string; the actual number of bytes in the byte string (which, \fB\s-1NOTE\s0\fR, is
less than the number of bytes read) is returned in \fIsize\fR.  If \fIvalue\fR is
non-NULL, the decoded byte string is copied into \fIvalue\fR and cursor is
automatically advanced to the end of the byte string; otherwise, cursor is
advanced only to the beginning of the byte string.  Returns number of bytes
read, 0 on decoding error (e.g., byte string exceeds maximum size).
.IP "int cbor_decode_text_string(char *value, uvast *size, unsigned char **cursor, unsigned int *bytesBuffered)" 4
.IX Item "int cbor_decode_text_string(char *value, uvast *size, unsigned char **cursor, unsigned int *bytesBuffered)"
Initial value of \fIsize\fR is the maximum allowable size of the decoded text
string; the actual number of bytes in the text string (which, \fB\s-1NOTE\s0\fR, is
less than the number of bytes read) is returned in size.  If \fIvalue\fR is
non-NULL, the decoded text string is copied into \fIvalue\fR and cursor is
automatically advanced to the end of the text string; otherwise, cursor
is advanced only to the beginning of the text string.  Returns number of
bytes read, 0 on decoding error (e.g., text string exceeds maximum size).
.IP "int cbor_decode_array_open(uvast *size, unsigned char **cursor, unsigned int *bytesBuffered)" 4
.IX Item "int cbor_decode_array_open(uvast *size, unsigned char **cursor, unsigned int *bytesBuffered)"
If \fIsize\fR is zero, any array is accepted and the actual size of the decoded
array is returned in \fIsize\fR; ((uvast) \-1) is returned in \fIsize\fR if the array
is of indefinite size.  If \fIsize\fR is ((uvast) \-1), \fBonly\fR an array of
indefinite length is accepted.  Otherwise, \fIsize\fR indicates the required
number of items in the array.  Cursor is automatically advanced.  Returns
number of bytes read, 0 on decoding error (such as wrong number of items).
.IP "int cbor_decode_break(unsigned char **cursor, unsigned int *bytesBuffered)" 4
.IX Item "int cbor_decode_break(unsigned char **cursor, unsigned int *bytesBuffered)"
Break code is read from the indicated location.  Cursor is automatically
advanced.  Returns number of bytes read, 0 on decoding error (e.g., no
break character at this location).
